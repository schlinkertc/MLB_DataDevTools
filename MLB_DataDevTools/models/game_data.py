# AUTOGENERATED! DO NOT EDIT! File to edit: 03a_models.game_data.ipynb (unless otherwise specified).

__all__ = ['GameData']

# Internal Cell

import statsapi as mlb
from pydantic import (
    BaseModel,
    Field,
    validator,
    conint,
    constr,
    root_validator
)
from .base_models import *
from enum import Enum
import datetime as dt
from typing import Optional,Dict

# Internal Cell

class GameDetails(BaseModel):
    pk: int
    type: GameType
    doubleHeader: bool
    id: str
    gamedayType: GamedayType
    tiebreaker: bool
    gameNumber: conint(gt=0,lt=3)
    calendarEventID: str
    season: str
    seasonDisplay: str

    @validator('doubleHeader')
    def validate_double_header(cls,v):
        if v == 'S':
            return True
        else:
            return v

# Internal Cell

class DayNight(str,Enum):
    day='day'
    night='night'
class AmPm(str,Enum):
    AM='AM'
    PM='PM'

# Internal Cell

class GameDatetime(BaseModel):
    dateTime: dt.datetime = Field(...,description="Timezone unaware datetime for the game")
    originalDate: dt.date
    dayNight: DayNight
    time: dt.time = Field(...,description='Local time for the game')
    ampm: AmPm

    @root_validator
    def validate_game_time(cls,values):
        """
        Adds 12 hours to the game time if 'pm'
        """
        if values['ampm']=='PM':
            values['time'] = dt.time(
                values['time'].hour + 12,
                values['time'].minute
            )
            return values
        return values

# Internal Cell

class GameStatus(BaseModel):
    abstractGameState: AbstractGameState
    codedGameState: constr(max_length=2)
    detailedState: str
    statusCode: constr(max_length=2)
    reason: Optional[str] = None
    startTimeTBD: Optional[bool] = False
    abstractGameCode: AbstractGameCode

# Internal Cell

class TeamVenueBase(MLBEndpointBase):
    id: int
class TeamVenue(TeamVenueBase):
    name: str

# Internal Cell

class TeamRecord(BaseModel):
    wins: conint(ge=0)
    losses: conint(ge=0)
    winningPercentage: confloat(ge=0,lt=1) = Field(...,alias='pct')


class GameTeamRecord(TeamRecord):
    gamesPlayed: int
    wildCardGamesBack: CustomInt
    leagueGamesBack: CustomInt
    springLeagueGamesBack: CustomInt
    sportGamesBack: CustomInt
    leagueRecord: TeamRecord
    divisionLeader: bool
    records: dict # not sure what's supposed to go here...

    class Config:
        allow_population_by_field_name=True

# Internal Cell

class GameTeam(MLBEndpointReference):
    season: int
    venue: TeamVenue
    springVenue: TeamVenueBase
    teamCode: str
    fileCode: str
    abbreviation: str
    teamName: str
    locationName: str
    firstYearOfPlay: str
    league: MLBEndpointReference
    division: MLBEndpointReference
    shortName: str
    record: GameTeamRecord
    springLeague: MLBEndpointReference
    allStarStatus: bool
    active: bool



# Internal Cell

class Player(MLBPerson):
    primaryNumber: Optional[int] = None
    birthDate: dt.date
    currentAge: int
    birthCity: str
    birthStateProvince: Optional[str] = None
    birthCountry: str

    middleName: Optional[str] = None

    pitchHand: PlayerHandedness
    batSide: PlayerHandedness

    draftYear: Optional[int] = None
    mlbDebutDate: dt.date

    strikeZoneTop: float
    strikeZoneBottom: float


# Internal Cell

class GameVenue(TeamVenue):
    location: VenueLocation
    timeZone: TimeZone
    fieldInfo: FieldInfo

# Internal Cell

class GameWeather(BaseModel):
    condition: str
    temp: int
    wind: str

# Internal Cell

class GameInfo(BaseModel):
    attendance: int
    gameDurationMinutes: int

    @property
    def game_duration(self):
        return dt.timedelta(minutes=self.gameDurationMinutes)

# Internal Cell

class Challenges(BaseModel):
    used: int
    remaining: int

class GameReview(BaseModel):
    hasChallenges: bool
    away: Challenges
    home: Challenges

# Internal Cell

class GameFlags(BaseModel):
    noHitter: bool
    perfectGame: bool
    awayTeamNoHitter: bool
    awayTeamPerfectGame: bool
    homeTeamNoHitter: bool
    homeTeamPerfectGame: bool

# Internal Cell

class HomeAway(str,Enum):
    home = 'home'
    away = 'away'

# Cell

class GameData(BaseModel):
    game: GameDetails
    datetime: GameDatetime
    status: GameStatus
    teams: Dict[HomeAway,GameTeam]
    players: Dict[str,Player]
    venue: GameVenue
    gameInfo: GameInfo
    review: GameReview
    flags: GameFlags
    probablePitchers: Dict[HomeAway,PersonBase]
    officialScorer: PersonBase
    primaryDatacaster: PersonBase